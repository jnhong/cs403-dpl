! simple
square(x) := x * x :;
sqrt(x) := x ^ 0.5 :;
magnitude(v) := sqrt(square(v[0]) + square(v[1])) :;
v := allocate(2) :;
v[0] == 5, v[1] == 6,

println("The magnitude of vector <5,6> is ", magnitude(v), "."),

! classic
fib(n) :=
    if[ n < 2 ?
        n
      : else
        fib(n-1) + fib(n-2)
      ]
    :;

println("The 6th fibonacci number is ", fib(6)),

! what?
f := allocate(5) :;

{
i := 0 :;
j := 0 :;
 while[ : i < sizeof(f) :
        j == i mod 2,
        f[i] == lambda[x: lambda[y,z: return x * (y - z) + i * j, return 0]],
        i == i + 1
      ]
},

g(z) := if[ z < 1 ? f : else fib ] :;

println("1*(2-3) + 2*(2 mod 2) = ", g(0)[2](1)(2,3)),

! streams
stream_display(stream,n) :=
    helper(stream,i) :=
        if[ i < n ?
            print(scar[stream]),
            if[ i < (n-1) ?  print(",") ],
            print(" "),
            helper(scdr[stream],i+1)
          ]
        :;
    print("("),
    helper(stream,0),
    println("...)")
    :;

integers_from(n) := scons[n,integers_from(n+1)] :;

map(f,l) := scons[f(scar[l]),map(f,scdr[l])] :;

integers := integers_from(1) :;

squares := map(square,integers) :;

stream_display(squares,10),
